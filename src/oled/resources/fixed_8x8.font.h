#pragma once

#include <oled/font.h>

namespace OLED::Resource::Font {

    static constexpr ::OLED::Font::column_type _Fixed_8x8_data[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x5f, 0x5f, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00, 
        0x14, 0x7f, 0x7f, 0x14, 0x7f, 0x7f, 0x14, 0x00, 
        0x24, 0x2e, 0x2a, 0x6b, 0x6b, 0x3a, 0x12, 0x00, 
        0x46, 0x66, 0x30, 0x18, 0x0c, 0x66, 0x62, 0x00, 
        0x30, 0x7a, 0x4f, 0x5d, 0x37, 0x7a, 0x48, 0x00, 
        0x00, 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x1c, 0x3e, 0x63, 0x41, 0x00, 0x00, 
        0x00, 0x00, 0x41, 0x63, 0x3e, 0x1c, 0x00, 0x00, 
        0x08, 0x2a, 0x3e, 0x1c, 0x1c, 0x3e, 0x2a, 0x08, 
        0x00, 0x08, 0x08, 0x3e, 0x3e, 0x08, 0x08, 0x00, 
        0x00, 0x00, 0x80, 0xe0, 0x60, 0x00, 0x00, 0x00, 
        0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 
        0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 
        0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00, 
        0x3e, 0x7f, 0x59, 0x4d, 0x47, 0x7f, 0x3e, 0x00, 
        0x00, 0x40, 0x42, 0x7f, 0x7f, 0x40, 0x40, 0x00, 
        0x72, 0x7b, 0x49, 0x49, 0x49, 0x4f, 0x46, 0x00, 
        0x41, 0x41, 0x49, 0x49, 0x49, 0x7f, 0x36, 0x00, 
        0x1e, 0x1e, 0x10, 0x10, 0x7f, 0x7f, 0x10, 0x00, 
        0x27, 0x67, 0x45, 0x45, 0x45, 0x7d, 0x39, 0x00, 
        0x3e, 0x7f, 0x49, 0x49, 0x49, 0x79, 0x30, 0x00, 
        0x01, 0x01, 0x61, 0x71, 0x19, 0x0f, 0x07, 0x00, 
        0x36, 0x7f, 0x49, 0x49, 0x49, 0x7f, 0x36, 0x00, 
        0x06, 0x4f, 0x49, 0x49, 0x49, 0x7f, 0x3e, 0x00, 
        0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0xe6, 0x66, 0x00, 0x00, 0x00, 
        0x00, 0x08, 0x1c, 0x36, 0x63, 0x41, 0x00, 0x00, 
        0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 
        0x00, 0x00, 0x41, 0x63, 0x36, 0x1c, 0x08, 0x00, 
        0x00, 0x02, 0x03, 0x59, 0x5d, 0x07, 0x02, 0x00, 
        0x3e, 0x7f, 0x41, 0x5d, 0x5d, 0x5f, 0x5e, 0x00, 
        0x7c, 0x7e, 0x13, 0x11, 0x13, 0x7e, 0x7c, 0x00, 
        0x7f, 0x7f, 0x49, 0x49, 0x49, 0x7f, 0x36, 0x00, 
        0x3e, 0x7f, 0x41, 0x41, 0x41, 0x63, 0x22, 0x00, 
        0x7f, 0x7f, 0x41, 0x41, 0x63, 0x3e, 0x1c, 0x00, 
        0x7f, 0x7f, 0x49, 0x49, 0x49, 0x41, 0x41, 0x00, 
        0x7f, 0x7f, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00, 
        0x3e, 0x7f, 0x41, 0x41, 0x51, 0x73, 0x32, 0x00, 
        0x7f, 0x7f, 0x08, 0x08, 0x08, 0x7f, 0x7f, 0x00, 
        0x00, 0x41, 0x41, 0x7f, 0x7f, 0x41, 0x41, 0x00, 
        0x20, 0x60, 0x40, 0x40, 0x40, 0x7f, 0x3f, 0x00, 
        0x7f, 0x7f, 0x08, 0x1c, 0x36, 0x63, 0x41, 0x00, 
        0x7f, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 
        0x7f, 0x7f, 0x0e, 0x1c, 0x0e, 0x7f, 0x7f, 0x00, 
        0x7f, 0x7f, 0x06, 0x0c, 0x18, 0x7f, 0x7f, 0x00, 
        0x3e, 0x7f, 0x41, 0x41, 0x41, 0x7f, 0x3e, 0x00, 
        0x7f, 0x7f, 0x09, 0x09, 0x09, 0x0f, 0x06, 0x00, 
        0x3e, 0x7f, 0x41, 0x71, 0x61, 0xff, 0xbe, 0x00, 
        0x7f, 0x7f, 0x09, 0x19, 0x39, 0x6f, 0x46, 0x00, 
        0x26, 0x6f, 0x49, 0x49, 0x49, 0x7b, 0x32, 0x00, 
        0x01, 0x01, 0x01, 0x7f, 0x7f, 0x01, 0x01, 0x01, 
        0x7f, 0x7f, 0x40, 0x40, 0x40, 0x7f, 0x7f, 0x00, 
        0x1f, 0x3f, 0x60, 0x60, 0x60, 0x3f, 0x1f, 0x00, 
        0x3f, 0x7f, 0x60, 0x30, 0x60, 0x7f, 0x3f, 0x00, 
        0x63, 0x77, 0x1c, 0x08, 0x1c, 0x77, 0x63, 0x00, 
        0x47, 0x4f, 0x68, 0x38, 0x18, 0x0f, 0x07, 0x00, 
        0x41, 0x61, 0x71, 0x59, 0x4d, 0x47, 0x43, 0x00, 
        0x00, 0x00, 0x7f, 0x7f, 0x41, 0x41, 0x00, 0x00, 
        0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 
        0x00, 0x00, 0x41, 0x41, 0x7f, 0x7f, 0x00, 0x00, 
        0x08, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x08, 0x00, 
        0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
        0x00, 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 
        0x20, 0x74, 0x54, 0x54, 0x54, 0x7c, 0x78, 0x00, 
        0x7f, 0x7f, 0x48, 0x48, 0x48, 0x78, 0x30, 0x00, 
        0x38, 0x7c, 0x44, 0x44, 0x44, 0x6c, 0x28, 0x00, 
        0x30, 0x78, 0x48, 0x48, 0x48, 0x7f, 0x7f, 0x00, 
        0x38, 0x7c, 0x54, 0x54, 0x54, 0x5c, 0x18, 0x00, 
        0x00, 0x48, 0x7e, 0x7f, 0x49, 0x03, 0x02, 0x00, 
        0x98, 0xbc, 0xa4, 0xa4, 0xa4, 0xfc, 0x7c, 0x00, 
        0x7f, 0x7f, 0x04, 0x04, 0x04, 0x7c, 0x78, 0x00, 
        0x00, 0x00, 0x44, 0x7d, 0x7d, 0x40, 0x00, 0x00, 
        0x40, 0xc0, 0x80, 0x80, 0x80, 0xfd, 0x7d, 0x00, 
        0x7f, 0x7f, 0x10, 0x18, 0x3c, 0x64, 0x40, 0x00, 
        0x00, 0x00, 0x41, 0x7f, 0x7f, 0x40, 0x00, 0x00, 
        0x7c, 0x7c, 0x18, 0x78, 0x1c, 0x7c, 0x78, 0x00, 
        0x7c, 0x7c, 0x04, 0x04, 0x04, 0x7c, 0x78, 0x00, 
        0x38, 0x7c, 0x44, 0x44, 0x44, 0x7c, 0x38, 0x00, 
        0xfc, 0xfc, 0x24, 0x24, 0x24, 0x3c, 0x18, 0x00, 
        0x18, 0x3c, 0x24, 0x24, 0x24, 0xfc, 0xfc, 0x00, 
        0x7c, 0x7c, 0x04, 0x04, 0x04, 0x0c, 0x08, 0x00, 
        0x48, 0x5c, 0x54, 0x54, 0x54, 0x74, 0x24, 0x00, 
        0x00, 0x04, 0x04, 0x3f, 0x7f, 0x44, 0x44, 0x00, 
        0x3c, 0x7c, 0x40, 0x40, 0x40, 0x7c, 0x7c, 0x00, 
        0x1c, 0x3c, 0x60, 0x60, 0x60, 0x3c, 0x1c, 0x00, 
        0x3c, 0x7c, 0x60, 0x30, 0x60, 0x7c, 0x3c, 0x00, 
        0x44, 0x6c, 0x38, 0x10, 0x38, 0x6c, 0x44, 0x00, 
        0x9c, 0xbc, 0xa0, 0xa0, 0xa0, 0xfc, 0x7c, 0x00, 
        0x44, 0x64, 0x74, 0x54, 0x5c, 0x4c, 0x44, 0x00, 
        0x00, 0x08, 0x08, 0x3e, 0x77, 0x41, 0x41, 0x00, 
        0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00, 
        0x00, 0x41, 0x41, 0x77, 0x3e, 0x08, 0x08, 0x00, 
        0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00, 
    };

    static constexpr ::OLED::Font::Glyph _Fixed_8x8_glyphs[] = {
        { 0x0000, 8, 8, 1, 0, 0 }, // 0x20 (' ')
        { 0x0008, 8, 8, 1, 0, 0 }, // 0x21 ('!')
        { 0x0010, 8, 8, 1, 0, 0 }, // 0x22 ('"')
        { 0x0018, 8, 8, 1, 0, 0 }, // 0x23 ('#')
        { 0x0020, 8, 8, 1, 0, 0 }, // 0x24 ('$')
        { 0x0028, 8, 8, 1, 0, 0 }, // 0x25 ('%')
        { 0x0030, 8, 8, 1, 0, 0 }, // 0x26 ('&')
        { 0x0038, 8, 8, 1, 0, 0 }, // 0x27 (''')
        { 0x0040, 8, 8, 1, 0, 0 }, // 0x28 ('(')
        { 0x0048, 8, 8, 1, 0, 0 }, // 0x29 (')')
        { 0x0050, 8, 8, 1, 0, 0 }, // 0x2a ('*')
        { 0x0058, 8, 8, 1, 0, 0 }, // 0x2b ('+')
        { 0x0060, 8, 8, 1, 0, 0 }, // 0x2c (',')
        { 0x0068, 8, 8, 1, 0, 0 }, // 0x2d ('-')
        { 0x0070, 8, 8, 1, 0, 0 }, // 0x2e ('.')
        { 0x0078, 8, 8, 1, 0, 0 }, // 0x2f ('/')
        { 0x0080, 8, 8, 1, 0, 0 }, // 0x30 ('0')
        { 0x0088, 8, 8, 1, 0, 0 }, // 0x31 ('1')
        { 0x0090, 8, 8, 1, 0, 0 }, // 0x32 ('2')
        { 0x0098, 8, 8, 1, 0, 0 }, // 0x33 ('3')
        { 0x00a0, 8, 8, 1, 0, 0 }, // 0x34 ('4')
        { 0x00a8, 8, 8, 1, 0, 0 }, // 0x35 ('5')
        { 0x00b0, 8, 8, 1, 0, 0 }, // 0x36 ('6')
        { 0x00b8, 8, 8, 1, 0, 0 }, // 0x37 ('7')
        { 0x00c0, 8, 8, 1, 0, 0 }, // 0x38 ('8')
        { 0x00c8, 8, 8, 1, 0, 0 }, // 0x39 ('9')
        { 0x00d0, 8, 8, 1, 0, 0 }, // 0x3a (':')
        { 0x00d8, 8, 8, 1, 0, 0 }, // 0x3b (';')
        { 0x00e0, 8, 8, 1, 0, 0 }, // 0x3c ('<')
        { 0x00e8, 8, 8, 1, 0, 0 }, // 0x3d ('=')
        { 0x00f0, 8, 8, 1, 0, 0 }, // 0x3e ('>')
        { 0x00f8, 8, 8, 1, 0, 0 }, // 0x3f ('?')
        { 0x0100, 8, 8, 1, 0, 0 }, // 0x40 ('@')
        { 0x0108, 8, 8, 1, 0, 0 }, // 0x41 ('A')
        { 0x0110, 8, 8, 1, 0, 0 }, // 0x42 ('B')
        { 0x0118, 8, 8, 1, 0, 0 }, // 0x43 ('C')
        { 0x0120, 8, 8, 1, 0, 0 }, // 0x44 ('D')
        { 0x0128, 8, 8, 1, 0, 0 }, // 0x45 ('E')
        { 0x0130, 8, 8, 1, 0, 0 }, // 0x46 ('F')
        { 0x0138, 8, 8, 1, 0, 0 }, // 0x47 ('G')
        { 0x0140, 8, 8, 1, 0, 0 }, // 0x48 ('H')
        { 0x0148, 8, 8, 1, 0, 0 }, // 0x49 ('I')
        { 0x0150, 8, 8, 1, 0, 0 }, // 0x4a ('J')
        { 0x0158, 8, 8, 1, 0, 0 }, // 0x4b ('K')
        { 0x0160, 8, 8, 1, 0, 0 }, // 0x4c ('L')
        { 0x0168, 8, 8, 1, 0, 0 }, // 0x4d ('M')
        { 0x0170, 8, 8, 1, 0, 0 }, // 0x4e ('N')
        { 0x0178, 8, 8, 1, 0, 0 }, // 0x4f ('O')
        { 0x0180, 8, 8, 1, 0, 0 }, // 0x50 ('P')
        { 0x0188, 8, 8, 1, 0, 0 }, // 0x51 ('Q')
        { 0x0190, 8, 8, 1, 0, 0 }, // 0x52 ('R')
        { 0x0198, 8, 8, 1, 0, 0 }, // 0x53 ('S')
        { 0x01a0, 8, 8, 1, 0, 0 }, // 0x54 ('T')
        { 0x01a8, 8, 8, 1, 0, 0 }, // 0x55 ('U')
        { 0x01b0, 8, 8, 1, 0, 0 }, // 0x56 ('V')
        { 0x01b8, 8, 8, 1, 0, 0 }, // 0x57 ('W')
        { 0x01c0, 8, 8, 1, 0, 0 }, // 0x58 ('X')
        { 0x01c8, 8, 8, 1, 0, 0 }, // 0x59 ('Y')
        { 0x01d0, 8, 8, 1, 0, 0 }, // 0x5a ('Z')
        { 0x01d8, 8, 8, 1, 0, 0 }, // 0x5b ('[')
        { 0x01e0, 8, 8, 1, 0, 0 }, // 0x5c ('\')
        { 0x01e8, 8, 8, 1, 0, 0 }, // 0x5d (']')
        { 0x01f0, 8, 8, 1, 0, 0 }, // 0x5e ('^')
        { 0x01f8, 8, 8, 1, 0, 0 }, // 0x5f ('_')
        { 0x0200, 8, 8, 1, 0, 0 }, // 0x60 ('`')
        { 0x0208, 8, 8, 1, 0, 0 }, // 0x61 ('a')
        { 0x0210, 8, 8, 1, 0, 0 }, // 0x62 ('b')
        { 0x0218, 8, 8, 1, 0, 0 }, // 0x63 ('c')
        { 0x0220, 8, 8, 1, 0, 0 }, // 0x64 ('d')
        { 0x0228, 8, 8, 1, 0, 0 }, // 0x65 ('e')
        { 0x0230, 8, 8, 1, 0, 0 }, // 0x66 ('f')
        { 0x0238, 8, 8, 1, 0, 0 }, // 0x67 ('g')
        { 0x0240, 8, 8, 1, 0, 0 }, // 0x68 ('h')
        { 0x0248, 8, 8, 1, 0, 0 }, // 0x69 ('i')
        { 0x0250, 8, 8, 1, 0, 0 }, // 0x6a ('j')
        { 0x0258, 8, 8, 1, 0, 0 }, // 0x6b ('k')
        { 0x0260, 8, 8, 1, 0, 0 }, // 0x6c ('l')
        { 0x0268, 8, 8, 1, 0, 0 }, // 0x6d ('m')
        { 0x0270, 8, 8, 1, 0, 0 }, // 0x6e ('n')
        { 0x0278, 8, 8, 1, 0, 0 }, // 0x6f ('o')
        { 0x0280, 8, 8, 1, 0, 0 }, // 0x70 ('p')
        { 0x0288, 8, 8, 1, 0, 0 }, // 0x71 ('q')
        { 0x0290, 8, 8, 1, 0, 0 }, // 0x72 ('r')
        { 0x0298, 8, 8, 1, 0, 0 }, // 0x73 ('s')
        { 0x02a0, 8, 8, 1, 0, 0 }, // 0x74 ('t')
        { 0x02a8, 8, 8, 1, 0, 0 }, // 0x75 ('u')
        { 0x02b0, 8, 8, 1, 0, 0 }, // 0x76 ('v')
        { 0x02b8, 8, 8, 1, 0, 0 }, // 0x77 ('w')
        { 0x02c0, 8, 8, 1, 0, 0 }, // 0x78 ('x')
        { 0x02c8, 8, 8, 1, 0, 0 }, // 0x79 ('y')
        { 0x02d0, 8, 8, 1, 0, 0 }, // 0x7a ('z')
        { 0x02d8, 8, 8, 1, 0, 0 }, // 0x7b ('{')
        { 0x02e0, 8, 8, 1, 0, 0 }, // 0x7c ('|')
        { 0x02e8, 8, 8, 1, 0, 0 }, // 0x7d ('}')
        { 0x02f0, 8, 8, 1, 0, 0 }, // 0x7e ('~')
    };

    static constexpr ::OLED::Font Fixed_8x8 {
        8,
        8,
        0,
        0x20u,
        0x7fu,
        _Fixed_8x8_data,
        _Fixed_8x8_glyphs,
    };

}
